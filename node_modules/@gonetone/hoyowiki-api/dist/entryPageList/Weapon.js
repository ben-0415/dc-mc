"use strict";
/*
 * Copyright (c) 2020-2022 原神資訊站 Genshin Impact Info
 * https://genshininfo.reh.tw/
 *
 * Developed by 旋風之音 GoneTone
 * https://github.com/GoneTone
 *
 *                               _oo0oo_
 *                              o8888888o
 *                              88" . "88
 *                              (| -_- |)
 *                              0\  =  /0
 *                            ___/`---'\___
 *                          .' \\|     |# '.
 *                         / \\|||  :  |||# \
 *                        / _||||| -:- |||||- \
 *                       |   | \\\  -  #/ |   |
 *                       | \_|  ''\---/''  |_/ |
 *                       \  .-\__  '-'  ___/-. /
 *                     ___'. .'  /--.--\  `. .'___
 *                  ."" '<  `.___\_<|>_/___.' >' "".
 *                 | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 *                 \  \ `_.   \_ __\ /__ _/   .-` /  /
 *             =====`-.____`.___ \_____/___.-`___.-'=====
 *                               `=---='
 *           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *               佛祖保佑                       永無 BUG
 *
 * GitHub: https://github.com/GoneTone/node-hoyowiki-api
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Weapon = void 0;
const api_1 = require("../utils/api");
require("../utils/constants");
const HoYoWikiAPIError_1 = require("../errors/HoYoWikiAPIError");
class Weapon {
    /**
     * @param {EntryPageDataOptions | undefined} options
     *
     * @returns {Promise<EntryPageListDataWeaponAPIInterface.Data>}
     */
    async get(options) {
        var _a, _b, _c, _d, _e, _f;
        const response = await api_1.axiosInstance.post('/get_entry_page_list', {
            filters: (_a = options === null || options === void 0 ? void 0 : options.filters) !== null && _a !== void 0 ? _a : [],
            menu_id: "4" /* EntryPageMenu.Weapon */,
            page_num: (_b = options === null || options === void 0 ? void 0 : options.pageNum) !== null && _b !== void 0 ? _b : 1,
            page_size: (_c = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _c !== void 0 ? _c : 30,
            use_es: true
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (((_d = response.data) === null || _d === void 0 ? void 0 : _d.retcode) === 0)
            return response.data.data;
        throw new HoYoWikiAPIError_1.HoYoWikiAPIError(((_e = response.data) === null || _e === void 0 ? void 0 : _e.message) || 'Unable to get weapon data.', (_f = response.data) === null || _f === void 0 ? void 0 : _f.retcode);
    }
    /**
     * @param {EntryPageDataOptions | undefined} options
     *
     * @returns {Promise<EntryPageListDataWeaponAPIInterface.List[]>}
     *
     * @private
     */
    async getListConcat(options) {
        var _a, _b;
        const data = await this.get(options);
        if (data.list.length === 0)
            return [];
        const dataNext = await this.getListConcat({
            pageNum: (options === null || options === void 0 ? void 0 : options.pageNum) ? options.pageNum + 1 : 2,
            pageSize: (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : 30,
            filters: (_b = options === null || options === void 0 ? void 0 : options.filters) !== null && _b !== void 0 ? _b : []
        });
        return [...data.list, ...dataNext];
    }
    /**
     * Get Weapon Entry Page Data List.
     *
     * @param {string[]} filters
     *
     * @returns {Promise<EntryPageListDataWeaponAPIInterface.List[]>}
     */
    async getList(...filters) {
        return await this.getListConcat({
            filters
        });
    }
    /**
     * Get Entry Page Data Total.
     *
     * @param {string[]} filters
     *
     * @returns {Promise<number>}
     */
    async getTotal(...filters) {
        const data = await this.get({
            pageNum: 1,
            pageSize: 0,
            filters
        });
        return Number(data.total);
    }
    /**
     * Search List By Weapon Name.
     *
     * @param {string} name Weapon Name
     *
     * @returns {Promise<EntryPageListDataWeaponAPIInterface.List[]>}
     */
    async searchListByName(name) {
        const data = await this.getList();
        return data.filter(item => item.name === name);
    }
}
exports.Weapon = Weapon;
//# sourceMappingURL=Weapon.js.map